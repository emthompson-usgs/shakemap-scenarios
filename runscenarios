#!/usr/bin/env python

import os
import sys
import argparse
from configobj import ConfigObj

from impactutils.io.cmd import get_command_output


def run_one(event, args):
    print('> %s' % event)
    cmd = 'mkscenariogrids -e ' + event + \
          ' -m ' + str(args.max) + \
          ' -r ' + str(args.res) + \
          ' --mesh_dx ' + str(args.mesh_dx)
    rc, so, se = get_command_output(cmd)
    print(cmd)
    if rc is False:
        raise Exception(se)


def main(args):
    config = ConfigObj(os.path.join(os.path.expanduser('~'), 'scenarios.conf'))
    shakehome = config['system']['shakehome']

    #----------------------------------------------------
    # Get list of existing events
    #----------------------------------------------------
    cmd = 'ls ' + os.path.join(shakehome, "data")
    rc, so, se = get_command_output(cmd)
    events = so.decode().split("\n")

    # Remove empty list elements
    events = [x for x in events if x]
    nr = len(events)
    print('nr: %i' % nr)

    #----------------------------------------------------
    # Distribute runs onto different forks
    #----------------------------------------------------
    NP = min(args.nproc, nr)
    ii = 0
    for i in range(nr):
        if i >= NP:
            os.waitpid(-1, 0)

        if os.fork() == 0:
            run_one(events[ii], args)
            sys.exit(0)
        else:
            ii = ii + 1


if __name__ == '__main__':
    desc = '''
    This is a wrapper around 'mkscenariogrids' that grabs the list
    of all the existing event directories, loops over them and
    breaks up the run onto multiple processors. Usuallly want to
    run 'mkinputdir' first.
    '''
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument(
        '-n', '--nproc', help='Number of processors.', type=int, default=1)
    parser.add_argument('-r', '--res', default=30 / 60 / 60, type=float,
                        help='The resolution in decimal degrees; '
                             'default is 30/60/60.')
    parser.add_argument('-m', '--max', default=500000, type=int,
                        help='Maximum number of cells allowed; resolution '
                             'is adjusted to ensure this number is no '
                             'exceeded; default is 500,000.')
    parser.add_argument(
        '--mesh_dx', default=0.5, type=float,
        help='The resolution for rupture mesh in km; only used for EdgeRuptures; '
             'default is 0.5.')

    args = parser.parse_args()
    main(args)
